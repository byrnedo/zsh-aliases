# vi:syntax=sh
#
alias lockit="gnome-screensaver-command --lock"

RED=`echo -e '\033[101m\033[37m'`
GREEN=`echo -e '\033[102m'`
DARK_RED=`echo -e '\033[41m\033[37m'`
DARK_GREEN=`echo -e '\033[42m'`
NORMAL=`echo -e '\033[0m'`

DARK_GREEN_TEXT=`echo -e '\033[32m'`
LIGHT_CYAN_TEXT=`echo -e '\033[96m'`
LIGHT_BLUE=`echo -e '\033[104m'`

notifyError(){
    defaultTerm='error'
    term=${1:-$defaultTerm}

    WINDOWID=
    while read line
    do
        hasError=$(echo $line |grep -i "$term")
        if [ $hasError ]; then
            echo "$line"
            #(sleep 1 &&  DISPLAY=:0  wmctrl -F -a "I am on top" -b add,above) &
            #(DISPLAY=:0  zenity --notification --text "$line")
            zenity --notification --text "$line"
        fi
    done < "/dev/stdin"
}


#convert md to man page in terminal
function mandown() {
    pandoc -s -f markdown -t man $*|man -l - 
}

function devTmux(){
    tmux new-session 
    tmux new-window
    tmux split-window -h -c "$HOME/projects/pageroonline"
    tmux split-window -h
    tmux -2 attach-session -d 
}

# pretty color json
function jcurl(){
    curl -s $* | jq
}

alias shedColor="sed \
      -e 's/==>.*<==/\x1b[95m&\x1b[0m/' \
        -e 's/^[a-z.]\+\.[A-Za-z]*\(Exception\|Error\):.*/\x1b[93;41m&\x1b[0m/' \
        -e 's/.*\bERR.*/\x1b[91m&\x1b[0m/' \
        -e 's/.*\bWARN.*/\x1b[93m&\x1b[0m/' \
        -e 's/.*\bDEBUG.*/\x1b[96m&\x1b[0m/' \
        -e 's/^[ \t]\+\bat .*\(pagero\|diamo\|paysol\)[^ ]* .*/\x1b[1m&\x1b[0m/i' \
        -e 's/^[ \t]\+\bat .*/\x1b[37m&\x1b[0m/i'"

function colortail() {                                                                              
   tail $* | shedColor
}

func staticDockerPortMapper(){
    [[ $# -lt 3 ]] && >&2 echo "usage: $0 <container-name/id> <exposed-container-port>/<tcp|udp> <static-port>" && return
    local container=$1
    local internalPort=$2
    local staticPort=$3

    local currentPid=$(lsof -ti :$staticPort 2>/dev/null)

    if [[ -n $currentPid ]]
    then
        command=$(ps -h --format %c $currentPid)
        read -k 1 -r "?Kill process $currentPid/$command already on your static port $staticPort? [y/n]" 
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            kill $currentPid >/dev/null 2>&1 
        else
            echo "Well not killing it is probably not going to work but ok..."
        fi
    fi

    local pid=
    local port=

    while true
    do

        local currentPort=$(docker inspect $container|jq ".[0].NetworkSettings.Ports.\"$internalPort\"| .[0].HostPort|tonumber")

        if [[ ! $? ]]
        then
            >&2 echo Port Not Found
        elif [[ "$currentPort" -ne "$port" ]]
        then
            echo "Mapping $currentPort to $staticPort"
            port="$currentPort"

            [[ -n $pid ]] && echo "Killing old socat command at $pid" && kill "$pid"
            socat tcp-listen:$staticPort,reuseaddr,fork tcp:localhost:$port &
        fi
        sleep 5
    done
}

#tmux
alias tmux="tmux -2"

#git
alias gsup='git branch --set-upstream-to origin/"$(git-branch-current 2> /dev/null)" "$(git-branch-current 2> /dev/null)"' 
alias gms='git merge --no-commit --squash' 
alias gwip='gc -am "WIP" && gp'
alias gclean="git fetch -p && for branch in \$(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '\$2 == \"[gone]\" {sub(\"refs/heads/\", \"\", \$1); print \$1}'); do git branch -D \$branch; done"

#docker
alias dimages='docker images|head -10'
alias dkill='docker kill $(docker ps -q)'
alias aptupfull='sudo apt update && sudo apt upgrade && sudo apt dist-upgrade'

alias vimgo='docker run -v $GOPATH/src:/go/src -ti byrnedo/go-ide vim'

function dps(){
    docker ps --format "table{{.ID}}\t{{.Names}}\t{{.Image}}"
    #sed -e "1~2s#/\(.*\):#/$GREEN\1$NORMAL:#" -e "1~2s/:\(.*\)/$RED\1$NORMAL/" | \
    #sed -e "0~1s#/\(.*\):#/$DARK_GREEN\1$NORMAL:#" -e "0~1s/:\(.*\)/$DARK_RED\1$NORMAL/"
}

function watchDps(){
    while true
    do
        clear && dps
        echo Last Updated $(date)
        sleep 2
    done
}

function flattenImage(){
    [[ $# -lt 2 ]] && >&2 echo "usage: $0 <image name> <new image name>" && return;
    local image=$1
    local newImage=$2
    local ID=$(docker run -d $image /bin/bash)
    echo $ID
    docker export $ID | docker import - $newImage
}

function dpull() {
    for image in $(docker ps --format "{{.Image}}")
    do
        docker pull $image
    done
}

function ddangle(){
    docker rmi $(docker images -q -f dangling=true)
}


alias dcompose="docker-compose"
alias dswarm="docker-swarm"
alias dmachine="docker-machine"

compdef _changeRecipeCompletions changeRecipe

function search_for_git_dirs() {
    cd $1 && find . -name *.git -type d  -exec dirname {} \; 2>/dev/null
}

function _startDir(){
    local startDir=$1
    echo "cd $startDir && find .  -path \*/node_modules -prune -o -path \*/bower_components -prune -o -path \*/vendor -prune -o -name \*.git -type d -exec dirname {} \;  2>/dev/null"
}

function fd() {
    local startDir="${FD_SEARCH_PATH:=.}"
    local defCmd=$(_startDir "$startDir")
    local dir
    dir=$(FZF_DEFAULT_COMMAND="$defCmd" fzf) && cd "$startDir/$dir"
}

function sd() {
    local startDir=${SD_SEARCH_PATH:=.}
    local dir
    local defCmd=$(_startDir "$startDir")
    dir=$(FZF_DEFAULT_COMMAND="$defCmd" fzf) && cd "$startDir/$dir"
}

function god() {
    local dir
    local startDir="${GOPATH}/src"
    local defCmd=$(_startDir "$startDir")
    dir=$(FZF_DEFAULT_COMMAND="$defCmd" fzf) && cd "$startDir/$dir"
}


alias kafkacat="docker run -it --network=host edenhill/kafkacat:1.5.0"
alias k="kubectl"
alias migrate='docker run -v $(pwd):/migrations --network host migrate/migrate'

function gtp() {
    tag=$1
    git tag $tag && git push origin $tag
}

function dokku() {
    ssh dokku "dokku $*"
}
